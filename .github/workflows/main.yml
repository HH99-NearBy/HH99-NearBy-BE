# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: CI

on:
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

env:
  RESOURCE_PATH: ./src/main/resources/application.yaml
  PROJECT_NAME: ssggwan
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  S3_BUCKET_NAME: ssggwan-s3-bucket
  SPRING_MAIL_PASSWORD: ${{ secrets.SPRING_MAIL_PASSWORD }}


jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Generate Environment Variables File for Properties
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.RESOURCE_PATH }}
        env:
          cloud.aws.credentials.access-key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          cloud.aws.credentials.secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          jwt.secret: ${{ secrets.JWT_SECRET_KEY }}
          kakao.client.id: ${{ secrets.KAKAO_CLIENT_ID }}
          kakao.redirect.url: ${{ secrets.KAKAO_REDIRECT_URL }}
          kakao.url: ${{ secrets.KAKAO_URL }}
          mail.url: ${{ secrets.MAIL_URL}}
          openvidu.secret: ${{ secrets.OPENVIDU_SECRET}}
          openvidu.url: ${{ secrets.OPENVIDU_URL}}
          spring.datasource.password: ${{ secrets.SPRING_DATASOURCE_PASSWORD}}
          spring.datasource.url: ${{ secrets.SPRING_DATASOURCE_URL}}
          spring.datasource.username: ${{ secrets.SPRING_DATASOURCE_USERNAME}}
          spring.mail.username: ${{ secrets.SPRING_MAIL_USERNAME }}
          spring.mail.password: ${{ secrets.SPRING_MAIL_PASSWORD }}
          signup.redirect.url: ${{ secrets.SIGNUP_REDIRECT_URL }}
          sentry.dsn: ${{ secrets.SENTRY_DSN }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Build
      - name: Build with Gradle
        run: ./gradlew clean build

      # 전송할 파일을 담을 디렉토리 생성
      - name: Make Directory for deliver
        run: mkdir deploy

      # Jar 파일 Copy
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy/

      # appspec.yml Copy
      - name: Copy appspec
        run: cp ./appspec.yml ./deploy/

      # script file Copy
      - name: Copy shell
        run: cp ./scripts/* ./deploy/

      # 압축파일 형태로 전달
      - name: Make zip file
        run: zip -r -qq -j ./$PROJECT_NAME.zip ./deploy

      # S3 Bucket으로 copy
      - name: Deliver to AWS S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: aws s3 cp --region ap-northeast-2 --acl private ./$PROJECT_NAME.zip s3://$S3_BUCKET_NAME/

      # Deploy
      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: aws deploy create-deployment --application-name ssggwan-app --deployment-group-name ssggwan-deployment-group --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME.zip --region ap-northeast-2
